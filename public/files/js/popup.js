// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	$(window.document).ready(Main.init);
};
Main.init = function(event) {
	Main._jAll = $("#all");
	utils_Storage.init();
	utils_Message.init();
	utils_Modalwindow.init();
	utils_EventManager.init();
	view_PageManager.init();
	Main.append($("<button class=\"window-ui\" data-ui=\"close\">✕</button>"));
	Main.setData();
	Main._jAll.on("click","[data-ui]",Main.onClick);
};
Main.setData = function() {
	utils_Storage.get(function(data) {
		view_PageManager.set(data);
		utils_Message.say("on loaded","nice");
	});
};
Main.onClick = function(event) {
	var action = $(event.currentTarget).data("ui");
	if(action == "close") {
		view_PopupWindow.close();
	}
};
Main.append = function(jTarget) {
	Main._jAll.children().append(jTarget);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var utils_EventManager = function() { };
utils_EventManager.__name__ = true;
utils_EventManager.init = function() {
	utils_EventManager._keys = [];
	view_PopupWindow.get().on({ keydown : utils_EventManager.onKeydown, keyup : utils_EventManager.onKeyup});
};
utils_EventManager.onKeydown = function(event) {
	var key = event.keyCode;
	utils_EventManager._keys.push(key);
	if(Lambda.has(utils_EventManager._keys,91) && key == 13) {
		view_PageManager.save();
	}
	if(Lambda.has(utils_EventManager._keys,91) && key == 67) {
		view_PopupWindow.close();
	}
};
utils_EventManager.onKeyup = function(event) {
	utils_EventManager._keys = [];
	var _g = event.keyCode;
	if(_g == 13) {
		view_PageManager.onEnterKey();
	}
	view_PageManager.onKeyup();
};
var utils_Handy = function() { };
utils_Handy.__name__ = true;
utils_Handy.getUniqueID = function(original) {
	var strong = 1000;
	if(original != null) {
		strong = original;
	}
	var time = DateTools.format(new Date(),"%Y%m%d%H%M");
	var id = time + Math.floor(strong * Math.random());
	return id;
};
utils_Handy.getTabData = function(status,callback) {
	chrome.tabs.query({ active : true},function(tab) {
		chrome.tabs.sendMessage(tab[0].id,{ status : status},function(response) {
			callback(response);
		});
	});
};
var utils_Message = function() { };
utils_Message.__name__ = true;
utils_Message.init = function() {
	utils_Message._jParent = $("<div id=\"message\"></div>");
	Main.append(utils_Message._jParent);
};
utils_Message.say = function(text,status) {
	var jText = $("<p class=\"" + status + "\">" + text + "</p>");
	utils_Message._jParent.empty().append(jText);
	var onComplete = function() {
		jText.delay(1500).animate({ opacity : 0},200,null,$bind(jText,jText.remove));
	};
	jText.css({ top : 5, opacity : 0}).animate({ top : 0, opacity : 1},100,"easeInOutSine",onComplete);
};
var utils_Modalwindow = function() { };
utils_Modalwindow.__name__ = true;
utils_Modalwindow.init = function() {
	utils_Modalwindow._jParent = $("<div id=\"modalwindow\"></div>");
	Main.append(utils_Modalwindow._jParent);
	utils_Modalwindow.setHTML();
	utils_Modalwindow._jBg = utils_Modalwindow._jParent.find(".background");
	utils_Modalwindow._jContent = utils_Modalwindow._jParent.find(".modalwindow-content");
	utils_Modalwindow._jField = utils_Modalwindow._jParent.find(".modalwindow-field");
	utils_Modalwindow._jBg.on({ "click" : utils_Modalwindow.onClickBg});
	utils_Modalwindow._jParent.find(".button-close").on({ "click" : utils_Modalwindow.close});
};
utils_Modalwindow.ask = function(message,callback) {
	var html = "<p class=\"title\">" + message.title + "</p>\n\t\t\t\t<p class=\"text\">" + message.text + "</p>";
	utils_Modalwindow._jField.html(html);
	if(callback != null) {
		utils_Modalwindow._jField.append(utils_Modalwindow.getJudgeButtonHTML()).find(".judge").off().on("click","button",function(event) {
			var action = $(event.currentTarget).data("action");
			if(action) {
				callback();
			}
			utils_Modalwindow.close();
		});
	}
	utils_Modalwindow.open();
};
utils_Modalwindow.open = function() {
	utils_Modalwindow._jParent.show();
	var top = utils_Modalwindow._jContent.height() * .5;
	utils_Modalwindow._jBg.css({ opacity : 0}).animate({ opacity : 1},200);
	utils_Modalwindow._jContent.css({ top : "50%", opacity : 0}).animate({ marginTop : -top, opacity : 1},200);
};
utils_Modalwindow.close = function() {
	utils_Modalwindow._jBg.animate({ opacity : 0},200,null,($_=utils_Modalwindow._jParent,$bind($_,$_.hide)));
};
utils_Modalwindow.onClickBg = function(event) {
	if(!$(event.target).hasClass("background")) {
		return;
	}
	utils_Modalwindow.close();
};
utils_Modalwindow.setHTML = function() {
	utils_Modalwindow._jParent.append("<div class=\"background\">\n\t\t\t\t<div class=\"modalwindow-content\">\n\t\t\t\t\t<div class=\"modalwindow-field\"></div>\n\t\t\t\t\t<button class=\"button-close\">×</button>\n\t\t\t\t</div>\n\t\t\t</div>");
};
utils_Modalwindow.getJudgeButtonHTML = function() {
	return "<div class=\"judge\">\n\t\t\t\t<button data-action=\"true\">Yes</button>\n\t\t\t\t<button data-action=\"false\">No</button>\n\t\t\t</div>";
};
var utils_Storage = function() { };
utils_Storage.__name__ = true;
utils_Storage.init = function() {
	utils_Storage._storage = chrome.storage.local;
};
utils_Storage.get = function(callback) {
	utils_Storage._storage.get("EASY_NOTEPAD",function(strage) {
		var data = Reflect.getProperty(strage,"EASY_NOTEPAD");
		callback(data);
	});
};
utils_Storage.save = function(key,value) {
	utils_Storage.get(function(data) {
		if(data == null) {
			data = { };
		}
		Reflect.setProperty(data,key,value);
		var storage = { };
		Reflect.setProperty(storage,"EASY_NOTEPAD",data);
		utils_Storage._storage.set(storage,function() {
			utils_Message.say("Successfully saved \"" + key + "\"","success");
		});
	});
};
var view_Page = function(pagename) {
	this._pagename = pagename;
	this.setHTML();
	this._jParent = $("[data-content=\"" + this._pagename + "\"]");
	this._jParent.find(".button-save").on({ "click" : $bind(this,this.save)});
};
view_Page.__name__ = true;
view_Page.prototype = {
	setHTML: function() {
	}
	,save: function() {
	}
	,set: function(data) {
	}
	,show: function() {
		this._jParent.show().addClass("current");
		this.focus();
	}
	,hide: function() {
		this._jParent.hide().removeClass("current");
	}
	,onKeyup: function() {
	}
	,isCurrent: function() {
		return this._jParent.hasClass("current");
	}
	,getPagename: function() {
		return this._pagename;
	}
	,getJParent: function() {
		return this._jParent;
	}
	,onEnterKey: function() {
	}
	,focus: function() {
	}
	,getData: function(data) {
		return Reflect.getProperty(data,this._pagename);
	}
};
var view_PageManager = function() { };
view_PageManager.__name__ = true;
view_PageManager.init = function() {
	view_PageManager._jParent = $("<div id=\"pages\"></div>");
	Main.append(view_PageManager._jParent);
	view_PageManager._pageMap = new haxe_ds_StringMap();
	var this1 = view_PageManager._pageMap;
	var v = new view_page_Memo();
	var _this = this1;
	if(__map_reserved["memo"] != null) {
		_this.setReserved("memo",v);
	} else {
		_this.h["memo"] = v;
	}
	var this2 = view_PageManager._pageMap;
	var v1 = new view_page_Setting();
	var _this1 = this2;
	if(__map_reserved["setting"] != null) {
		_this1.setReserved("setting",v1);
	} else {
		_this1.h["setting"] = v1;
	}
	$("[data-jump]").on({ "click" : view_PageManager.onShow});
};
view_PageManager.addHTML = function(html) {
	view_PageManager._jParent.append(html);
};
view_PageManager.set = function(data) {
	var key = view_PageManager._pageMap.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = view_PageManager._pageMap;
		(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]).set(data);
	}
	view_PageManager.hideAll();
	var _this1 = view_PageManager._pageMap;
	(__map_reserved["memo"] != null ? _this1.getReserved("memo") : _this1.h["memo"]).show();
};
view_PageManager.save = function() {
	view_PageManager.getCurrentPage().save();
};
view_PageManager.onEnterKey = function() {
	view_PageManager.getCurrentPage().onEnterKey();
};
view_PageManager.onKeyup = function() {
	view_PageManager.getCurrentPage().onKeyup();
};
view_PageManager.onShow = function(event) {
	view_PageManager.hideAll();
	var pagename = $(event.currentTarget).data("jump");
	var _this = view_PageManager._pageMap;
	(__map_reserved[pagename] != null ? _this.getReserved(pagename) : _this.h[pagename]).show();
};
view_PageManager.hideAll = function() {
	var key = view_PageManager._pageMap.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = view_PageManager._pageMap;
		(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]).hide();
	}
};
view_PageManager.getCurrentPage = function() {
	var key = view_PageManager._pageMap.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = view_PageManager._pageMap;
		var page = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
		if(page.isCurrent()) {
			return page;
		}
	}
	return null;
};
var view_PopupWindow = function() { };
view_PopupWindow.__name__ = true;
view_PopupWindow.get = function() {
	return view_PopupWindow._jWindow;
};
view_PopupWindow.getHeight = function() {
	return view_PopupWindow._jWindow.height();
};
view_PopupWindow.close = function() {
	view_PopupWindow._window.close();
};
var view_page_Memo = function() {
	view_Page.call(this,"memo");
	view_page_MemoManager.init(this._jParent,this._pagename);
};
view_page_Memo.__name__ = true;
view_page_Memo.__super__ = view_Page;
view_page_Memo.prototype = $extend(view_Page.prototype,{
	save: function() {
		view_page_MemoManager.save();
	}
	,set: function(data) {
		var datas = view_Page.prototype.getData.call(this,data);
		if(datas == null) {
			datas = [{ id : 1, name : "Note", value : "input text"}];
			utils_Modalwindow.ask({ title : "EasyNotepad", text : "Hello, I'm simple notepad."});
		}
		view_page_MemoManager.set(datas);
	}
	,onKeyup: function() {
		if(!view_page_MemoManager.getActiveTab().isFocus()) {
			return;
		}
		this.save();
	}
	,focus: function() {
		view_page_MemoManager.focus();
	}
	,setHTML: function() {
		var html = "\n\t\t\t<section data-content=\"" + this._pagename + "\">\n\t\t\t\t<header class=\"header\">\n\t\t\t\t\t<nav class=\"tab-navi\"></nav>\n\t\t\t\t</header>\n\t\t\t\t<div class=\"content\"></div>\n\t\t\t\t<div class=\"button-list\">\n\t\t\t\t\t<div class=\"button-list-utils\">\n\t\t\t\t\t\t<button class=\"button button-utils\" data-add=\"increment\">\n\t\t\t\t\t\t\t<span>Add tab</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"button button-utils\" data-add=\"url\">\n\t\t\t\t\t\t\t<span>Stamp URL</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"button button-utils\" data-add=\"time\">\n\t\t\t\t\t\t\t<span>Stamp time</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button class=\"button-jump\" data-jump=\"setting\">&nbsp;</button>\n\t\t\t\t</div>\n\t\t\t</section>";
		view_PageManager.addHTML(html);
	}
});
var view_page_MemoManager = function() { };
view_page_MemoManager.__name__ = true;
view_page_MemoManager.init = function(jParent,pagename) {
	view_page_MemoManager._pagename = pagename;
	view_page_MemoManager._jParent = jParent;
	view_page_MemoManager._jNavi = view_page_MemoManager._jParent.find(".tab-navi");
	view_page_MemoManager._jContent = view_page_MemoManager._jParent.find(".content");
	view_page_MemoManager._tabMap = new haxe_ds_StringMap();
	view_page_MemoManager._jParent.find("[data-add]").on("click",null,function(event) {
		view_page_MemoManager.setAddButton(event);
	});
	view_page_TabControler.init(view_page_MemoManager._jParent);
};
view_page_MemoManager.save = function() {
	utils_Storage.save(view_page_MemoManager._pagename,view_page_MemoManager.getData());
	view_page_MemoManager.focus();
};
view_page_MemoManager.set = function(data) {
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var tab = new view_page_Tab(data[i]);
		var this1 = view_page_MemoManager._tabMap;
		var k = tab.getID();
		var _this = this1;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,tab);
		} else {
			_this.h[k] = tab;
		}
	}
	view_page_MemoManager.setTabButton();
	view_page_MemoManager.activeFirstTab();
};
view_page_MemoManager.focus = function() {
	view_page_MemoManager.getActiveTab().focus();
};
view_page_MemoManager.setTabButton = function() {
	view_page_MemoManager._jNavi.find(".page-tab").off().on("click",null,function(event) {
		var jTarget = $(event.currentTarget);
		var id = jTarget.data("area_tab");
		var _this = view_page_MemoManager._tabMap;
		var tab = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(tab.isEdit()) {
			return;
		}
		if(tab.isActive()) {
			tab.editName();
			return;
		}
		view_page_MemoManager.hideAll();
		tab.show();
		view_page_MemoManager.focus();
	});
};
view_page_MemoManager.setAddButton = function(event) {
	var key = $(event.currentTarget).data("add");
	switch(key) {
	case "increment":
		view_page_TabControler.onClick(event);
		break;
	case "time":
		view_page_MemoManager.addTime();
		break;
	case "url":
		view_page_MemoManager.addUrl();
		break;
	}
};
view_page_MemoManager.getData = function() {
	var datas = [];
	var _this = view_page_MemoManager._tabMap;
	var tab = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tab.hasNext()) {
		var tab1 = tab.next();
		datas.push({ id : tab1.getID(), name : tab1.getName(), value : tab1.getValue()});
	}
	return datas;
};
view_page_MemoManager.getActiveTab = function() {
	var id = view_page_MemoManager._jNavi.find(".active").data("area_tab");
	var _this = view_page_MemoManager._tabMap;
	if(__map_reserved[id] != null) {
		return _this.getReserved(id);
	} else {
		return _this.h[id];
	}
};
view_page_MemoManager.addNaviHTML = function(html) {
	view_page_MemoManager._jNavi.append(html);
};
view_page_MemoManager.getNavi = function() {
	return view_page_MemoManager._jNavi;
};
view_page_MemoManager.addContentHTML = function(html) {
	view_page_MemoManager._jContent.append(html);
};
view_page_MemoManager.getContent = function() {
	return view_page_MemoManager._jContent;
};
view_page_MemoManager.addTab = function(data) {
	var tab = new view_page_Tab(data);
	var this1 = view_page_MemoManager._tabMap;
	var k = tab.getID();
	var _this = this1;
	if(__map_reserved[k] != null) {
		_this.setReserved(k,tab);
	} else {
		_this.h[k] = tab;
	}
	view_page_MemoManager.setTabButton();
};
view_page_MemoManager.removeTab = function() {
	var id = view_page_MemoManager.getActiveTab().getID();
	var _this = view_page_MemoManager._tabMap;
	(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).remove();
	view_page_MemoManager._tabMap.remove(id);
	view_page_MemoManager.activeFirstTab();
};
view_page_MemoManager.activeFirstTab = function() {
	view_page_MemoManager._jNavi.find(".page-tab").first().click();
};
view_page_MemoManager.hideAll = function() {
	var _this = view_page_MemoManager._tabMap;
	var tab = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tab.hasNext()) {
		var tab1 = tab.next();
		tab1.hide();
	}
};
view_page_MemoManager.addUrl = function() {
	utils_Handy.getTabData("url",function(response) {
		var text = "";
		var title = Reflect.getProperty(response,"title");
		var location = Reflect.getProperty(response,"location");
		if(title == null && location == null) {
			utils_Message.say("Failed to get \"title,location\"","error");
			return;
		}
		if(title == null) {
			utils_Message.say("Failed to get \"title\"","error");
		} else {
			text += title + "\n";
		}
		if(location == null) {
			utils_Message.say("Failed to get \"location\"","error");
		} else {
			text += location;
		}
		view_page_MemoManager.getActiveTab().addText(text);
		view_page_MemoManager.save();
	});
};
view_page_MemoManager.addTime = function() {
	var date = DateTools.format(new Date(),"【%Y.%m.%d %H:%M】");
	view_page_MemoManager.getActiveTab().addText(date);
	view_page_MemoManager.save();
};
var view_page_Setting = function() {
	view_Page.call(this,"setting");
	view_page_Setting._jSettingList = this._jParent.find(".setting-list").find(".input-setting");
};
view_page_Setting.__name__ = true;
view_page_Setting.__super__ = view_Page;
view_page_Setting.prototype = $extend(view_Page.prototype,{
	save: function() {
		var data = this.getListData();
		if(!this.validate(data)) {
			utils_Message.say("Input error","error");
			return;
		}
		this.setStyles(data);
		utils_Storage.save(this._pagename,data);
	}
	,set: function(data) {
		var value = view_Page.prototype.getData.call(this,data);
		this.setStyles(value,function(key,value1) {
			view_page_Setting._jSettingList.filter("[name=\"" + key + "\"]").val(value1);
		});
	}
	,focus: function() {
		this._jParent.find("input:visible").eq(0).focus();
	}
	,onEnterKey: function() {
		var jCur = this._jParent.find(":focus");
		var index = view_page_Setting._jSettingList.index(jCur);
		if(view_page_Setting._jSettingList.length - 1 == index) {
			this._jParent.find(".button-save").focus();
		} else {
			view_page_Setting._jSettingList.eq(index + 1).focus();
		}
	}
	,setHTML: function() {
		var html = "<section data-content=\"" + this._pagename + "\">\n\t\t\t\t<header class=\"header\">\n\t\t\t\t\t<h2 class=\"page-title\">Setting</h2>\n\t\t\t\t</header>\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t<ul class=\"setting-list\">\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<p>Height (input textarea)</p>\n\t\t\t\t\t\t\t\t<input class=\"input-setting\" type=\"text\" name=\"height\">px\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<p>Font size</p>\n\t\t\t\t\t\t\t\t<input class=\"input-setting\" type=\"text\" name=\"fontSize\">px\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-list\">\n\t\t\t\t\t<div class=\"button-list-utils\">\n\t\t\t\t\t\t<button class=\"button button-save\">\n\t\t\t\t\t\t\t<span>Save</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button class=\"button-jump\" data-jump=\"memo\">&nbsp;</button>\n\t\t\t\t</div>\n\t\t\t</section>";
		view_PageManager.addHTML(html);
	}
	,getListData: function() {
		var data = { };
		var length = view_page_Setting._jSettingList.length;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var jTarget = view_page_Setting._jSettingList.eq(i);
			var key = jTarget.prop("name");
			var value = jTarget.val();
			data[key] = value;
		}
		return data;
	}
	,setStyles: function(data,insertFunc) {
		var fields = Reflect.fields(data);
		var _g1 = 0;
		var _g = fields.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = fields[i];
			var value = Reflect.getProperty(data,key);
			this.setStyle(key,value);
			if(insertFunc != null) {
				insertFunc(key,value);
			}
		}
	}
	,setStyle: function(key,value) {
		switch(key) {
		case "fontSize":
			if(value == "") {
				value = "16";
			}
			$("html").css({ fontSize : value + "px"});
			break;
		case "height":
			$(".content-area").css({ height : value});
			break;
		case "width":
			$("#all").css({ width : value});
			break;
		}
	}
	,validate: function(data) {
		var result = true;
		return result;
	}
});
var view_page_Tab = function(data) {
	this._id = data.id;
	this._name = data.name;
	var html = this.getHTML(data);
	view_page_MemoManager.addNaviHTML(__map_reserved["tab"] != null ? html.getReserved("tab") : html.h["tab"]);
	view_page_MemoManager.addContentHTML(__map_reserved["area"] != null ? html.getReserved("area") : html.h["area"]);
	this._jTab = view_page_MemoManager.getNavi().find("[data-area_tab=\"" + this._id + "\"]");
	this._jTextarea = view_page_MemoManager.getContent().find("[data-area_id=\"" + this._id + "\"]").find(".textarea");
	this._jTab.find(".delete").on("click",null,view_page_TabControler.decrement);
	this._jTextarea.val(data.value);
};
view_page_Tab.__name__ = true;
view_page_Tab.prototype = {
	getID: function() {
		return this._id;
	}
	,getName: function() {
		return this._name;
	}
	,setValue: function(text) {
		this._jTextarea.val(text);
	}
	,getValue: function() {
		return this._jTextarea.val();
	}
	,getCursorPosition: function() {
		return this._jTextarea.get(0).selectionStart;
	}
	,isFocus: function() {
		return this._jTextarea["is"](":focus");
	}
	,isActive: function() {
		return this._jTab.hasClass("active");
	}
	,isEdit: function() {
		return this._jTab.hasClass("edit");
	}
	,focus: function() {
		this._jTextarea.focus();
	}
	,show: function() {
		this._jTab.add(this._jTextarea.parent()).addClass("active");
	}
	,hide: function() {
		this._jTab.add(this._jTextarea.parent()).removeClass("active");
	}
	,remove: function() {
		this._jTab.add(this._jTextarea.parent()).remove();
	}
	,editName: function() {
		var _gthis = this;
		this._jTab.addClass("edit");
		var jName = this._jTab.find(".name");
		var jInput = this._jTab.find(".edit-name");
		var name = jName.text();
		jName.hide();
		jInput.show().focus().val(name).off("blur").on("blur",null,function() {
			var value = jInput.val();
			if(value == "") {
				jInput.focus();
				utils_Message.say("name is empty","error");
				return;
			}
			jName.show().text(value);
			jInput.hide();
			_gthis._jTab.removeClass("edit");
			_gthis._name = value;
			view_page_MemoManager.save();
		});
	}
	,addText: function(text) {
		var value = this.getValue();
		var position = this.getCursorPosition();
		var before = HxOverrides.substr(value,0,position);
		var after = HxOverrides.substr(value,position,value.length);
		if(HxOverrides.substr(value,position - 1,position) != "\n") {
			before += "\n";
		}
		if(HxOverrides.substr(value,position,position + 1) != "\n") {
			after = "\n" + after;
		}
		this.setValue(before + text + after);
	}
	,getHTML: function(data) {
		var _g = new haxe_ds_StringMap();
		var value = "<div class=\"page-tab\" data-area_tab=\"" + this._id + "\">\n\t\t\t\t\t\t<p class=\"name\">" + this._name + "</p>\n\t\t\t\t\t\t<input class=\"edit-name\" type=\"text\">\n\t\t\t\t\t\t<p class=\"delete\">×</p>\n\t\t\t\t\t</div>";
		if(__map_reserved["tab"] != null) {
			_g.setReserved("tab",value);
		} else {
			_g.h["tab"] = value;
		}
		var value1 = "<div class=\"content-area\" data-area_id=\"" + this._id + "\">\n\t\t\t\t\t\t<textarea class=\"textarea\"></textarea>\n\t\t\t\t\t</div>";
		if(__map_reserved["area"] != null) {
			_g.setReserved("area",value1);
		} else {
			_g.h["area"] = value1;
		}
		return _g;
	}
};
var view_page_TabControler = function() { };
view_page_TabControler.__name__ = true;
view_page_TabControler.init = function(jParent) {
};
view_page_TabControler.onClick = function(event) {
	var action = $(event.currentTarget).data("add");
	switch(action) {
	case "decrement":
		view_page_TabControler.decrement();
		break;
	case "increment":
		view_page_TabControler.increment();
		break;
	}
};
view_page_TabControler.increment = function() {
	view_page_MemoManager.addTab({ id : utils_Handy.getUniqueID(), name : "Note", value : ""});
	utils_Message.say("add tab","success");
};
view_page_TabControler.decrement = function() {
	utils_Modalwindow.ask({ title : "Delete note", text : "Can I delete it?"},function() {
		view_page_MemoManager.removeTab();
		utils_Message.say("remove tab","success");
	});
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {};
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Main.APP_NAME = "EASY_NOTEPAD";
view_PopupWindow._window = window;
view_PopupWindow._jWindow = $(window);
Main.main();
})();
