// Generated by Haxe 3.4.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var Main = function() { };
Main.main = function() {
	$("document").ready(Manager.init);
};
var Manager = function() { };
Manager.init = function(event) {
	view_PopupWindow.init();
	utils_Storage.init();
	utils_Message.init();
	utils_EventManager.init();
	view_PageManager.init();
	Manager.setCloseButton();
	Manager.onInit();
};
Manager.onInit = function() {
	utils_Storage.get(function(data) {
		view_PageManager.setView(data);
		utils_Message.send("on loaded","nice");
	});
};
Manager.setCloseButton = function() {
	$("#button-close").on("click",null,function() {
		view_PopupWindow.close();
	});
};
var Reflect = function() { };
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var haxe_IMap = function() { };
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var utils_ContactTab = function() { };
utils_ContactTab.get = function(status,callback) {
	chrome.tabs.query({ active : true},function(tab) {
		chrome.tabs.sendMessage(tab[0].id,{ status : status},function(response) {
			callback(response);
		});
	});
};
var utils_EventManager = function() { };
utils_EventManager.init = function() {
	utils_EventManager._keys = [];
	view_PopupWindow.get().on({ keydown : utils_EventManager.onKeydown, keyup : utils_EventManager.onKeyup});
};
utils_EventManager.onKeydown = function(event) {
	var key = event.keyCode;
	utils_EventManager._keys.push(key);
	if(Lambda.has(utils_EventManager._keys,91) && key == 13) {
		view_PageManager.onShortcutSave();
	}
	if(Lambda.has(utils_EventManager._keys,91) && key == 67) {
		view_PopupWindow.close();
	}
};
utils_EventManager.onKeyup = function(event) {
	utils_EventManager._keys = [];
	var _g = event.keyCode;
	if(_g == 13) {
		view_PageManager.onEnterKey();
	}
	view_PageManager.onKeyup();
};
var utils_Message = function() { };
utils_Message.init = function() {
	utils_Message._jParent = $("#message");
};
utils_Message.send = function(message,status) {
	var jText = utils_Message._jParent.empty().append("<p class=\"" + status + "\">" + message + "</p>").find("p");
	jText.css({ top : 5, opacity : 0}).animate({ top : 0, opacity : 1},100,"easeInOutSine",function() {
		jText.delay(1500).animate({ opacity : 0},200,null,function() {
			jText.remove();
		});
	});
};
var utils_Storage = function() { };
utils_Storage.init = function() {
	utils_Storage._storage = chrome.storage.local;
};
utils_Storage.get = function(callback) {
	utils_Storage._storage.get("memomemo",function(object) {
		var tmp;
		var data;
		if(object == null) {
			data = null;
		} else {
			var data1;
			if(object.__properties__) {
				tmp = object.__properties__["get_" + "memomemo"];
				data1 = tmp;
			} else {
				data1 = false;
			}
			if(data1) {
				data = object[tmp]();
			} else {
				data = object["memomemo"];
			}
		}
		var data2 = data;
		callback(data2);
	});
};
utils_Storage.save = function(key,value) {
	utils_Storage.get(function(data) {
		if(data == null) {
			data = { };
		}
		var tmp;
		var tmp1;
		if(data.__properties__) {
			tmp = data.__properties__["set_" + key];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			data[tmp](value);
		} else {
			var tmp2 = value;
			data[key] = tmp2;
		}
		var object = { };
		var tmp3;
		var tmp4;
		if(object.__properties__) {
			tmp3 = object.__properties__["set_" + "memomemo"];
			tmp4 = tmp3;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			object[tmp3](data);
		} else {
			object["memomemo"] = data;
		}
		utils_Storage._storage.set(object,function() {
			utils_Message.send("Successfully saved \"" + key + "\"","success");
		});
	});
};
var view_Page = function(pagename) {
	this._pagename = pagename;
	this._jParent = $("[data-content=\"" + this._pagename + "\"]");
	this._jParent.find(".button-save").on({ "click" : $bind(this,this.save)});
};
view_Page.prototype = {
	save: function() {
	}
	,set: function(data) {
	}
	,show: function() {
		this._jParent.show().addClass("current");
		this.focus();
	}
	,hide: function() {
		this._jParent.hide().removeClass("current");
	}
	,onKeyup: function() {
	}
	,isCurrent: function() {
		return this._jParent.hasClass("current");
	}
	,getPagename: function() {
		return this._pagename;
	}
	,getJParent: function() {
		return this._jParent;
	}
	,onEnterKey: function() {
	}
	,focus: function() {
	}
	,getData: function(data) {
		var field = this._pagename;
		var tmp;
		if(data == null) {
			return null;
		} else {
			var tmp1;
			if(data.__properties__) {
				tmp = data.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return data[tmp]();
			} else {
				return data[field];
			}
		}
	}
};
var view_PageManager = function() { };
view_PageManager.init = function() {
	view_PageManager._Pages = new haxe_ds_StringMap();
	var this1 = view_PageManager._Pages;
	var v = new view_page_Memo();
	var _this = this1;
	if(__map_reserved["memo"] != null) {
		_this.setReserved("memo",v);
	} else {
		_this.h["memo"] = v;
	}
	var this2 = view_PageManager._Pages;
	var v1 = new view_page_Setting();
	var _this1 = this2;
	if(__map_reserved["setting"] != null) {
		_this1.setReserved("setting",v1);
	} else {
		_this1.h["setting"] = v1;
	}
	$("[data-jump]").on("click",null,function(event) {
		view_PageManager.hideAll();
		var id = $(event.currentTarget).data("jump");
		var _this2 = view_PageManager._Pages;
		(__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]).show();
	});
};
view_PageManager.setView = function(data) {
	view_PageManager.counter(function(page) {
		page.set(data);
	});
	view_PageManager.hideAll();
	var _this = view_PageManager._Pages;
	(__map_reserved["memo"] != null ? _this.getReserved("memo") : _this.h["memo"]).show();
};
view_PageManager.onShortcutSave = function() {
	view_PageManager.getCurrentPage().save();
};
view_PageManager.onEnterKey = function() {
	view_PageManager.getCurrentPage().onEnterKey();
};
view_PageManager.onKeyup = function() {
	view_PageManager.getCurrentPage().onKeyup();
};
view_PageManager.hideAll = function() {
	view_PageManager.counter(function(page) {
		page.hide();
	});
};
view_PageManager.getCurrentPage = function() {
	var currentPage = null;
	view_PageManager.counter(function(page) {
		if(page.isCurrent()) {
			currentPage = page;
		}
	});
	return currentPage;
};
view_PageManager.counter = function(func) {
	var key = view_PageManager._Pages.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = view_PageManager._Pages;
		func(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
	}
};
var view_PopupWindow = function() { };
view_PopupWindow.init = function() {
};
view_PopupWindow.get = function() {
	return view_PopupWindow._jWindow;
};
view_PopupWindow.close = function() {
	view_PopupWindow._window.close();
};
var view_page_Memo = function() {
	view_Page.call(this,"memo");
	view_page_Memo.jTextarea = this._jParent.find(".textarea");
	view_page_Memo.jTextarea.focus();
	this._jParent.find(".button-url").on({ "click" : $bind(this,this.addUrl)});
	this._jParent.find(".button-time").on({ "click" : $bind(this,this.addTime)});
};
view_page_Memo.__super__ = view_Page;
view_page_Memo.prototype = $extend(view_Page.prototype,{
	save: function() {
		utils_Storage.save(this._pagename,this.getValue());
		this.focus();
	}
	,set: function(data) {
		var value = view_Page.prototype.getData.call(this,data);
		view_page_Memo.jTextarea.val(value);
	}
	,onKeyup: function() {
		if(!this.isFocus()) {
			return;
		}
		this.save();
	}
	,focus: function() {
		view_page_Memo.jTextarea.focus();
	}
	,isFocus: function() {
		return view_page_Memo.jTextarea["is"](":focus");
	}
	,getValue: function() {
		return view_page_Memo.jTextarea.val();
	}
	,addUrl: function(event) {
		var _gthis = this;
		utils_ContactTab.get("url",function(response) {
			var text = "";
			var tmp;
			var title;
			if(response == null) {
				title = null;
			} else {
				var title1;
				if(response.__properties__) {
					tmp = response.__properties__["get_" + "title"];
					title1 = tmp;
				} else {
					title1 = false;
				}
				if(title1) {
					title = response[tmp]();
				} else {
					title = response["title"];
				}
			}
			var title2 = title;
			var tmp1;
			var location;
			if(response == null) {
				location = null;
			} else {
				var location1;
				if(response.__properties__) {
					tmp1 = response.__properties__["get_" + "location"];
					location1 = tmp1;
				} else {
					location1 = false;
				}
				if(location1) {
					location = response[tmp1]();
				} else {
					location = response["location"];
				}
			}
			var location2 = location;
			if(title2 == null && location2 == null) {
				utils_Message.send("Failed to get \"title,location\"","error");
				return;
			}
			if(title2 == null) {
				utils_Message.send("Failed to get \"title\"","error");
			} else {
				text += title2 + "\n";
			}
			if(location2 == null) {
				utils_Message.send("Failed to get \"location\"","error");
			} else {
				text += location2;
			}
			_gthis.addText(text);
		});
	}
	,addTime: function(event) {
		var date = new Date();
		var y = date.getFullYear();
		var m = date.getMonth() + 1;
		var d = date.getDate();
		var h = date.getHours();
		var m1 = date.getMinutes();
		this.addText("【" + y + "/" + m1 + "/" + d + "/" + h + "/" + m1 + "】");
	}
	,addText: function(text) {
		var value = this.getValue();
		var position = view_page_Memo.jTextarea.get(0).selectionStart;
		var before = HxOverrides.substr(value,0,position);
		var after = HxOverrides.substr(value,position,value.length);
		if(HxOverrides.substr(value,position - 1,position) != "\n") {
			before += "\n";
		}
		if(HxOverrides.substr(value,position,position + 1) != "\n") {
			after = "\n" + after;
		}
		view_page_Memo.jTextarea.val(before + text + after);
	}
});
var view_page_Setting = function() {
	view_Page.call(this,"setting");
	view_page_Setting._jSettingList = this._jParent.find(".setting-list").find("input[type=\"text\"]");
};
view_page_Setting.__super__ = view_Page;
view_page_Setting.prototype = $extend(view_Page.prototype,{
	save: function() {
		var data = this.getListData();
		if(!this.validate(data)) {
			utils_Message.send("Input error","error");
			return;
		}
		this.setStyles(data);
		utils_Storage.save(this._pagename,data);
	}
	,set: function(data) {
		var value = view_Page.prototype.getData.call(this,data);
		this.setStyles(value,function(key,value1) {
			view_page_Setting._jSettingList.filter("[name=\"" + key + "\"]").val(value1);
		});
	}
	,focus: function() {
		this._jParent.find("input:visible").eq(0).focus();
	}
	,onEnterKey: function() {
		var jCur = this._jParent.find(":focus");
		var index = view_page_Setting._jSettingList.index(jCur);
		if(view_page_Setting._jSettingList.length - 1 == index) {
			this._jParent.find(".button-save").focus();
		} else {
			view_page_Setting._jSettingList.eq(index + 1).focus();
		}
	}
	,getListData: function() {
		var data = { };
		var length = view_page_Setting._jSettingList.length;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var jTarget = view_page_Setting._jSettingList.eq(i);
			var key = jTarget.prop("name");
			var value = jTarget.val();
			data[key] = value;
		}
		return data;
	}
	,setStyles: function(data,insertFunc) {
		var fields = Reflect.fields(data);
		var _g1 = 0;
		var _g = fields.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = fields[i];
			var tmp;
			var value;
			if(data == null) {
				value = null;
			} else {
				var value1;
				if(data.__properties__) {
					tmp = data.__properties__["get_" + key];
					value1 = tmp;
				} else {
					value1 = false;
				}
				if(value1) {
					value = data[tmp]();
				} else {
					value = data[key];
				}
			}
			var value2 = value;
			this.setStyle(key,value2);
			if(insertFunc != null) {
				insertFunc(key,value2);
			}
		}
	}
	,setStyle: function(key,value) {
		if(value == "") {
			return;
		}
		switch(key) {
		case "fontSize":
			$("html").css({ fontSize : value + "px"});
			break;
		case "height":
			$(".inputarea").css({ height : value});
			break;
		case "width":
			$("#all").css({ width : value});
			break;
		}
	}
	,validate: function(data) {
		var result = true;
		return result;
	}
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {}
Manager.APP_NAME = "memomemo";
view_PopupWindow._window = window;
view_PopupWindow._jWindow = $(window);
Main.main();
})();
